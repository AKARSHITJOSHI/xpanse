#
# SPDX-License-Identifier: Apache-2.0
# SPDX-FileCopyrightText: Huawei Inc.
#
---
name: xpanse-cd

on:
  workflow_dispatch:
    inputs:
      ReleaseType:
        type: choice
        description: Select the next development version
        options:
          - Major Version
          - Minor Version
          - Patch Version

env:
  BOT_USER_NAME: eclipse-xpanse-bot
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  release:
    runs-on: ubuntu-latest
    if: github.repository == 'eclipse-xpanse/xpanse'
    outputs:
      next-version: ${{ steps.new_version.outputs.next-version }}
    permissions:
      contents: write
      packages: write
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          token: ${{ secrets.BOT_GITHUB_TOKEN }}

      - name: Set Up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: 17
          distribution: 'temurin'

      - name: Set current version env variable
        run: |
          echo "CURRENT_VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout | sed s/-SNAPSHOT/""/g)" >> $GITHUB_ENV

      - name: Map input to next action
        run: |
          if [ "${{github.event.inputs.ReleaseType}}" = "Major Version" ]; then
            echo "VERSION_FRAGMENT=major" >> $GITHUB_ENV
          elif [ "${{github.event.inputs.ReleaseType}}" = "Minor Version" ]; then
            echo "VERSION_FRAGMENT=feature" >> $GITHUB_ENV
          elif [ "${{github.event.inputs.ReleaseType}}" = "Patch Version" ]; then
            echo "VERSION_FRAGMENT=bug" >> $GITHUB_ENV
          else
            echo "No matching feature type  found"
          fi

      - name: Set next development version environment variable
        id: new_version
        uses: christian-draeger/increment-semantic-version@1.1.0
        with:
          current-version: ${{ env.CURRENT_VERSION }}
          version-fragment: ${{ env.VERSION_FRAGMENT }}

      - name: Remove SNAPSHOT from POM version
        run: mvn versions:set -DremoveSnapshot -DgenerateBackupPoms=false

      - name: Build
        run: mvn clean deploy -PreleaseBuild -DskipTests

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Github Packages
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ env.BOT_USER_NAME }}
          password: ${{ secrets.BOT_GITHUB_DOCKER_TOKEN }}

      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v4.6.0
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      - name: Build Docker Image and Push
        uses: docker/build-push-action@v4.1.1
        with:
          context: .
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest,${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.CURRENT_VERSION }}
          labels: ${{ steps.meta.outputs.labels }}
          provenance: false
