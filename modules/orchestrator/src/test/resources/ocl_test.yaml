serviceHostingType: self
billing:
  # The business model(`flat`, `exponential`, ...)
  model: flat
  # The rental period (`daily`, `weekly`, `monthly`, `yearly`)
  period: monthly
  # The billing currency (`euro`, `usd`, ...)
  currency: euro
# The flavor of the service, the @category/@name/@version/@flavor can locate the specific service to be deployed.
flavors:
  - name: 1-zookeeper-with-3-worker-nodes-normal
    # The fixed price during the period (the price applied one shot whatever is the service use)
    fixedPrice: 40
    # Properties for the service, which can be used by the deployment.
    properties:
      worker_nodes_count: 3
      flavor_id: c7.large.4
  - name: 1-zookeeper-with-3-worker-nodes-performance
    # The fixed price during the period (the price applied one shot whatever is the service use)
    fixedPrice: 60
    # Properties for the service, which can be used by the deployment.
    properties:
      worker_nodes_count: 3
      flavor_id: c7.xlarge.4
  - name: 1-zookeeper-with-5-worker-nodes-normal
    # The fixed price during the period (the price applied one shot whatever is the service use)
    fixedPrice: 60
    # Properties for the service, which can be used by the deployment.
    properties:
      worker_nodes_count: 5
      flavor_id: c7.large.4
  - name: 1-zookeeper-with-5-worker-nodes-performance
    # The fixed price during the period (the price applied one shot whatever is the service use)
    fixedPrice: 80
    # Properties for the service, which can be used by the deployment.
    properties:
      worker_nodes_count: 5
      flavor_id: c7.xlarge.4
deployment:
  # kind, Supported values are terraform, pulumi, crossplane.
  kind: terraform
  # Context for deployment: the context including some kind of parameters for the deployment, such as fix_env, fix_variable, env, variable, env_env, env_variable.
  # - fix_env: Values for variable of this type are defined by the managed service provider in the OCL template. Runtime will inject it to deployer as environment variables. This variable is not visible to the end user.
  # - fix_variable: Values for variable of this type are defined by the managed service provider in the OCL template. Runtime will inject it to deployer as usual variables. This variable is not visible to the end user.
  # - env: Value for a variable of this type can be provided by end user. If marked as mandatory then end user must provide value to this variable. If marked as optional and if end user does not provided it, then the fallback value to this variable is read by runtime (it can read from other sources, e.g., OS env variables). This variable is injected as a environment variable to the deployer.
  # - variable: Value for a variable of this type can be provided by end user. . If marked as mandatory then end user must provide value to this variable. If marked as optional and if end user does not provided it, then the fallback value to this variable is read by runtime (it can read from other sources, e.g., OS env variables). This variable is injected as a regular variable to the deployer.
  # - env_env: Value to this variable is read by runtime (it can read from other sources, e.g., OS env variables) and injected as a environment variable to the deployer. End user cannot see or change this variable.
  # - env_variable: Value to this variable is read by runtime (it can read from other sources, e.g., OS env variables) and injected as a regular variable to the deployer. End user cannot see or change this variable.
  # The parameters will be used to generate the API of the managed service.
  variables:
    - name: admin_passwd
      description: The admin password of all nodes in the Kafka cluster. If the value is empty, will create a random password.
      kind: variable
      dataType: string
      mandatory: false
      valueSchema:
        minLength: 8
        maxLength: 16
        pattern: ^(?=.*?[A-Z])(?=.*?[a-z])(?=.*?[0-9])(?=.*?[#?!@$%^&*-]).{8,16}$
    - name: vpc_name
      description: The vpc name of all nodes in the Kafka cluster. If the value is empty, will use the default value to find or create VPC.
      kind: variable
      dataType: string
      example: "kafka-vpc-default"
      mandatory: false
      value: "kafka-vpc-default"
    - name: subnet_name
      description: The sub network name of all nodes in the Kafka cluster. If the value is empty, will use the default value to find or create subnet.
      kind: variable
      dataType: string
      example: "kafka-subnet-default"
      mandatory: false
      value: "kafka-subnet-default"
    - name: secgroup_name
      description: The security group name of all nodes in the Kafka cluster. If the value is empty, will use the default value to find or create security group.
      kind: variable
      dataType: string
      example: "kafka-secgroup-default"
      mandatory: false
      value: "kafka-secgroup-default"
  deployer: |
    variable "secgroup_id" {}
    data "huaweicloud_availability_zones" "myaz" {}
    data "huaweicloud_compute_flavors" "myflavor" {
        availability_zone = data.huaweicloud_availability_zones.myaz.names[0]
        performance_type  = "normal"
        cpu_core_count    = 2
        memory_size       = 4
    }
    data "huaweicloud_vpc_subnet" "mynet" {
        name = "xpanse_subnet1"
    }
    resource "huaweicloud_compute_instance" "basic" {
        name               = "basic"
        image_id           = "a8601887-81d5-4eed-9338-382cf5b6d80b"
        flavor_id          = data.huaweicloud_compute_flavors.myflavor.ids[0]
        availability_zone  = data.huaweicloud_availability_zones.myaz.names[0]
        network {
            uuid = data.huaweicloud_vpc_subnet.mynet.id
        }
    }