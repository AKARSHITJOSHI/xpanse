/*
 * OpenAPI of policy-man
 * OpenAPI of policy-man server
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.eclipse.xpanse.modules.policy.policyman.generated.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import jakarta.validation.constraints.*;
import jakarta.validation.Valid;

/**
 * EvalResult
 */
@JsonPropertyOrder({
  EvalResult.JSON_PROPERTY_INPUT,
  EvalResult.JSON_PROPERTY_IS_SUCCESSFUL,
  EvalResult.JSON_PROPERTY_POLICY
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class EvalResult {
  public static final String JSON_PROPERTY_INPUT = "input";
  private String input;

  public static final String JSON_PROPERTY_IS_SUCCESSFUL = "isSuccessful";
  private Boolean isSuccessful;

  public static final String JSON_PROPERTY_POLICY = "policy";
  private String policy;

  public EvalResult() {
  }

  public EvalResult input(String input) {
    
    this.input = input;
    return this;
  }

   /**
   * Get input
   * @return input
  **/
  @jakarta.annotation.Nonnull
  @NotNull

  @JsonProperty(JSON_PROPERTY_INPUT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getInput() {
    return input;
  }


  @JsonProperty(JSON_PROPERTY_INPUT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setInput(String input) {
    this.input = input;
  }


  public EvalResult isSuccessful(Boolean isSuccessful) {
    
    this.isSuccessful = isSuccessful;
    return this;
  }

   /**
   * Get isSuccessful
   * @return isSuccessful
  **/
  @jakarta.annotation.Nonnull
  @NotNull

  @JsonProperty(JSON_PROPERTY_IS_SUCCESSFUL)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Boolean getIsSuccessful() {
    return isSuccessful;
  }


  @JsonProperty(JSON_PROPERTY_IS_SUCCESSFUL)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setIsSuccessful(Boolean isSuccessful) {
    this.isSuccessful = isSuccessful;
  }


  public EvalResult policy(String policy) {
    
    this.policy = policy;
    return this;
  }

   /**
   * Get policy
   * @return policy
  **/
  @jakarta.annotation.Nonnull
  @NotNull

  @JsonProperty(JSON_PROPERTY_POLICY)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getPolicy() {
    return policy;
  }


  @JsonProperty(JSON_PROPERTY_POLICY)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setPolicy(String policy) {
    this.policy = policy;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EvalResult evalResult = (EvalResult) o;
    return Objects.equals(this.input, evalResult.input) &&
        Objects.equals(this.isSuccessful, evalResult.isSuccessful) &&
        Objects.equals(this.policy, evalResult.policy);
  }

  @Override
  public int hashCode() {
    return Objects.hash(input, isSuccessful, policy);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EvalResult {\n");
    sb.append("    input: ").append(toIndentedString(input)).append("\n");
    sb.append("    isSuccessful: ").append(toIndentedString(isSuccessful)).append("\n");
    sb.append("    policy: ").append(toIndentedString(policy)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

